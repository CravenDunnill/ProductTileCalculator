<?php
/**
 * CravenDunnill ProductTileCalculator Extension
 *
 * @var $block \CravenDunnill\ProductTileCalculator\Block\TileCalculator
 */

// Get the product from the block
$product = $block->getProduct();

// Check if it's a simple product first
if (!$block->isSimpleProduct()) {
	return; // Only show calculator or warnings for simple products
}

// ONLY show the calculator for products in the "Tiles" attribute set
if (!$block->isInTilesAttributeSet()) {
	return; // Don't show anything for products in other attribute sets
}

// Now check for missing attributes only for "Tiles" products
$missingAttributes = $block->getMissingAttributes();
$hasAllAttributes = empty($missingAttributes);

// If we have all required attributes, show the calculator
if ($hasAllAttributes) {
	// Fallback values for debugging/testing
	$boxQuantity = $product->getData('box_quantity') ?: 10;
	$tilePerM2 = $product->getData('tile_per_m2') ?: 8;
	
	// Regular prices (includes VAT)
	$pricePerM2 = $block->getPricePerM2();
	$pricePerTile = $block->getPricePerTile();
	$pricePerBox = $block->getPricePerBox();
	
	// Special prices (includes VAT)
	$specialPricePerM2 = $block->getSpecialPricePerM2();
	$specialPricePerBox = $block->getSpecialPricePerBox();
	
	// Effective prices (special if available, otherwise regular)
	$effectivePricePerM2 = $block->getEffectivePricePerM2();
	$effectivePricePerBox = $block->getEffectivePricePerBox();
	
	$hasSpecialPrice = $block->hasSpecialPrice();
	
	// Get lead times for modal check
	$leadTimes = '';
	try {
		$leadTimes = $product->getAttributeText('lead_times');
		if (empty($leadTimes)) {
			$leadTimes = $product->getData('lead_times');
		}
	} catch (\Exception $e) {
		$leadTimes = $product->getData('lead_times');
	}
?>

<style>
	/* Hide native product price and add to cart form */
	.product-info-price,
	#product_addtocart_form {
		display: none !important;
	}
	
	/* Tile details grid styling */
	.tile-details-grid {
		display: flex;
		flex-wrap: wrap;
		margin-bottom: 15px;
		font-size: 16px;
		font-weight: 200;
	}
	
	.tile-details-grid .detail-item {
		flex: 1 0 30%;
	}
	
	.tile-details-grid .detail-label {
		font-weight: 600;
	}
	
	/* Availability badge styling */
	.availability-badge {
		display: inline-block;
		padding: 3px 8px;
		font-size: 16px;
		font-weight: 200;
	}
	
	.in-stock {
		background-color: #BEF6D3;
		color: #1F673B;
	}
	
	.out-of-stock {
		background-color: #e02b27;
		color: white;
	}
	
	/* Divider styling */
	.tile-calculator-divider {
		height: 1px;
		background-color: #002C5A;
		margin: 15px -15px;
	}
	
	/* Override default styles to force labels above inputs */
	.tile-calculator-container .input-group {
		display: block !important; /* Force block display */
		margin-bottom: 15px;
		flex: 1; /* Make input groups equal width */
	}
	
	.tile-calculator-container .input-group label {
		display: block !important; /* Force block display */
		width: 100% !important;
		margin-bottom: 8px;
		font-weight: 600;
	}
	
	.tile-calculator-container .quantity-controls {
		display: flex;
		align-items: center;
		width: 100%;
	}
	
	.tile-calculator-container .quantity-controls button {
		background-color: #002C5A !important;
		color: white !important;
		border: 2px solid #002C5A !important;
		border-radius: 6px !important;
		width: 38px;
		height: 38px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
	}
	
	/* Make input fields flexible and equal width */
	.tile-calculator-container .quantity-controls input {
		flex: 1; /* Flexible width */
		height: 38px;
		text-align: center;
		margin: 0 5px;
		min-width: 0; /* Allow flex shrinking */
		border: 2px solid #002C5A !important;
		border-radius: 6px !important;
		background-color: #F4F9FF !important;
		color: #002C5A !important;
	}
	
	/* Results text styling */
	.tile-calculator-container .result-text {
		font-size: 16px;
		margin: 15px 0;
		text-align: center;
	}
	
	.tile-calculator-container .result-text strong {
		font-weight: bold;
	}
	
	/* Full width button styling */
	.tile-calculator-container .actions {
		margin-top: 20px;
		width: 100%;
	}
	
	.tile-calculator-container .actions a {
		display: block !important;
		width: 100% !important;
		text-align: center;
		padding: 20px 10px;
		font-size: 16px;
		background-color: #002C5A !important;
		border-color: #002C5A !important;
		border-radius: 6px !important;
		position: relative;
		overflow: hidden;
		z-index: 1;
		transition: border-color 0.3s ease;
	}
	
	.tile-calculator-container .actions a::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 0%;
		height: 100%;
		background-color: #DB804A;
		transition: width 0.3s ease;
		z-index: -1;
	}
	
	.tile-calculator-container .actions a:hover {
		border-color: #DB804A !important;
	}
	
	.tile-calculator-container .actions a:hover::before {
		width: 100%;
	}
	
	.tile-calculator-container .actions a span {
		position: relative;
		z-index: 2;
	}
	
	/* Special price styling */
	.price-info .original-price {
		text-decoration: line-through;
		color: #666;
		font-weight: 200;
	}
	
	.price-info .special-price {
		color: #ff0000;
		font-weight: 600;
	}
	
	/* Delivery Confirmation Modal Styles */
	.delivery-modal {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 9999;
	}
	
	.delivery-modal-overlay {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.6);
	}
	
	.delivery-modal-content {
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		background-color: white;
		border-radius: 8px;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
		max-width: 500px;
		width: 90%;
		max-height: 90vh;
		overflow-y: auto;
	}
	
	.delivery-modal-header {
		padding: 20px;
		border-bottom: 1px solid #e8e8e8;
	}
	
	.delivery-modal-header h3 {
		margin: 0;
		font-size: 20px;
		font-weight: 600;
		color: #002C5A;
	}
	
	.delivery-modal-body {
		padding: 25px 20px;
	}
	
	.delivery-modal-body p {
		margin: 0 0 15px 0;
		line-height: 1.6;
		color: #333;
	}
	
	.delivery-modal-body .delivery-time-text {
		background-color: #F4F9FF;
		padding: 15px;
		border-radius: 6px;
		border-left: 4px solid #002C5A;
		margin: 20px 0;
	}
	
	.delivery-modal-body .delivery-time-text strong {
		color: #002C5A;
		font-size: 16px;
	}
	
	.delivery-modal-footer {
		padding: 15px 20px;
		border-top: 1px solid #e8e8e8;
		display: flex;
		gap: 10px;
		justify-content: flex-end;
	}
	
	.delivery-modal-footer button {
		padding: 12px 24px;
		border-radius: 6px;
		font-size: 16px;
		cursor: pointer;
		border: 2px solid;
		transition: all 0.3s ease;
	}
	
	.delivery-modal-footer button.secondary {
		background-color: white;
		color: #666;
		border-color: #d1d1d1;
	}
	
	.delivery-modal-footer button.secondary:hover {
		background-color: #f5f5f5;
		border-color: #999;
	}
	
	.delivery-modal-footer button.primary {
		background-color: #002C5A;
		color: white;
		border-color: #002C5A;
	}
	
	.delivery-modal-footer button.primary:hover {
		background-color: #DB804A;
		border-color: #DB804A;
	}
	
	@media (max-width: 600px) {
		.delivery-modal-content {
			width: 95%;
		}
		
		.delivery-modal-footer {
			flex-direction: column-reverse;
		}
		
		.delivery-modal-footer button {
			width: 100%;
		}
	}

</style>

<div class="tile-calculator-container" id="tile-calculator">
	
	<!-- Tile details in one line -->
	<div class="tile-details-grid">
		<!-- Colour information -->
		<div class="detail-item">
			<span class="detail-label"><?= __('Colour:') ?></span>
			<?php 
			// Safely get color attribute - try getData as fallback
			$colorValue = '';
			try {
				$colorValue = $product->getAttributeText('tile_colour_name');
				if (empty($colorValue)) {
					$colorValue = $product->getData('tile_colour_name');
				}
			} catch (\Exception $e) {
				// If there's an error, try getData
				$colorValue = $product->getData('tile_colour_name');
			}
			
			echo $block->escapeHtml($colorValue ?: $product->getName());
			?>
		</div>
		
		<!-- Size information -->
		<div class="detail-item">
			<span class="detail-label"><?= __('Size:') ?></span>
			<?php 
			// Safely get size attribute - try getData as fallback
			$sizeValue = '';
			try {
				$sizeValue = $product->getAttributeText('tile_size');
				if (empty($sizeValue)) {
					$sizeValue = $product->getData('tile_size');
				}
			} catch (\Exception $e) {
				// If there's an error, try getData
				$sizeValue = $product->getData('tile_size');
			}
			
			echo $block->escapeHtml($sizeValue ?: __('Standard'));
			?>
		</div>
	</div>
	
	<!-- Availability information -->
	<div style="display: none;">
		<?php if ($product->getIsSalable()): ?>
			<span class="availability-badge in-stock"><?= __('In Stock') ?></span>
		<?php else: ?>
			<span class="availability-badge out-of-stock"><?= __('Out of Stock') ?></span>
		<?php endif; ?>
	</div>
	
	<!-- Divider line -->
	<div class="tile-calculator-divider"></div>
	
	<div class="calculator-inputs">
		<div class="input-row" style="display: flex; justify-content: space-between; gap: 20px;">
			<!-- Area in mÂ² (left) -->
			<div class="input-group" style="flex: 1;">
				<!-- New heading above the input -->
				<label for="calculator-m2">
					<?= __('Order by m<sup>2</sup>') ?>
				</label>
				<div class="quantity-controls">
					<button type="button" class="action minus" id="decrease-m2" data-role="decrease-m2">
						<span>-</span>
					</button>
					<input type="text" 
						   id="calculator-m2" 
						   name="calculator-m2"
						   value="0.0" 
						   class="input-text"
						   style="text-align: center; margin: 0 5px;">
					<button type="button" class="action plus" id="increase-m2" data-role="increase-m2">
						<span>+</span>
					</button>
				</div>
				<!-- Pricing info below the input -->
				<div class="price-info" style="font-size: 12px; margin-top: 5px; font-weight: 200;">
					<?php if ($specialPricePerM2 !== null): ?>
						<span class="original-price"><?= __('&pound;%1 per m<sup>2</sup>', number_format($pricePerM2, 2)) ?></span>
						<br><span class="special-price">
							<?= __('&pound;%1 per m<sup>2</sup>', number_format($specialPricePerM2, 2)) ?>
						</span>
					<?php else: ?>
						<?= __('&pound;%1 per m<sup>2</sup>', number_format($pricePerM2, 2)) ?>
					<?php endif; ?>
				</div>
			</div>
			
			<!-- Number of Boxes (right) -->
			<div class="input-group" style="flex: 1;">
				<!-- New heading above the input -->
				<label for="calculator-boxes">
					<?= __('Order by box') ?>
				</label>
				<div class="quantity-controls">
					<button type="button" class="action minus" id="decrease-boxes" data-role="decrease-boxes">
						<span>-</span>
					</button>
					<input type="text" 
						   id="calculator-boxes" 
						   name="calculator-boxes"
						   value="1 box" 
						   class="input-text"
						   style="text-align: center;">
					<button type="button" class="action plus" id="increase-boxes" data-role="increase-boxes">
						<span>+</span>
					</button>
				</div>
				<!-- Pricing info below the input -->
				<div class="price-info" style="font-size: 12px; margin-top: 5px; font-weight: 200;">
					<?php if ($specialPricePerBox !== null): ?>
						<span class="original-price"><?= __('&pound;%1 per box', number_format($pricePerBox, 2)) ?></span>
						<br><span class="special-price">
							<?= __('&pound;%1 per box', number_format($specialPricePerBox, 2)) ?>
						</span>
						<br><?= __('(%1 tiles per box)', $boxQuantity) ?>
					<?php else: ?>
						<?= __('&pound;%1 per box<br>(%2 tiles per box)', number_format($pricePerBox, 2), $boxQuantity) ?>
					<?php endif; ?>
				</div>
			</div>
		</div>
	</div>

	<!-- Result text display using HTML sup tag for superscript -->
	<p class="result-text">
		<strong><span id="result-box-text">1 box</span></strong> 
		will cover 
		<strong><span id="area-covered">1.1</span> m<sup>2</sup></strong>
		<br>
		<strong><span id="total-tiles">10</span> tiles</strong> in your order
	</p>
	
	
	
	
	
	
	<!-- Divider line -->
	<div class="tile-calculator-divider"></div>
	
	<!-- Delivery information - only show when in stock or backorders allowed -->
	<?php if ($product->getIsSalable() || (int)$product->getBackorders() > 0): ?>
	<div class="delivery-info" style="margin-top: 15px; text-align: center;">
		<p style="margin-bottom: 5px;">
			<?= $block->escapeHtml($leadTimes) ?>
		</p>
		<p style="font-size: 12px; color: #666; margin-top: 0;"><?= __('Delivery options and costs confirmed at checkout') ?></p>
	</div>
	<?php endif; ?>
	
	
	
	
	
	<div class="actions">
		<a href="javascript:void(0);" 
		   class="action primary" 
		   id="calculator-add-to-cart"
		   data-lead-times="<?= $block->escapeHtmlAttr($leadTimes) ?>"
		   title="<?= $block->escapeHtml(__('Add to Cart')) ?>">
			<span id="update-quantity-text"><?= __('Add 1 Box &mdash; &pound;%1', number_format($effectivePricePerBox, 2)) ?></span>
		</a>
	</div>
	
	<!-- Delivery Confirmation Modal -->
	<div id="delivery-confirmation-modal" class="delivery-modal" style="display: none;">
		<div class="delivery-modal-overlay"></div>
		<div class="delivery-modal-content">
			<div class="delivery-modal-header">
				<h3><?= __('Stock &amp; Delivery Notice') ?></h3>
			</div>
			<div class="delivery-modal-body">
				<p><?= __('This product will arrive at our warehouse shortly.') ?></p>
				<p class="delivery-time-text"><strong id="modal-lead-time"></strong></p>
				<p><?= __('Once the product has arrived with us, we will deliver to you based on the Delivery Option you select at checkout.') ?></p>
				<p><strong><?= __('Would you like to proceed with adding this to your shopping cart?') ?></strong></p>
			</div>
			<div class="delivery-modal-footer">
				<button type="button" class="action secondary" id="modal-cancel">
					<span><?= __('Cancel') ?></span>
				</button>
				<button type="button" class="action primary" id="modal-confirm">
					<span><?= __('Yes, Add Tiles to Cart') ?></span>
				</button>
			</div>
		</div>
	</div>

	<div class="payment-options" style="display: grid; padding: 5px 0; justify-content: center; gap: 10px;">
		<?php 
		// Round to 2 decimal places first to ensure both widgets use the exact same price
		$roundedPrice = round($effectivePricePerBox, 2);
		?>
		<klarna-placement
		  id="klarna-widget"
		  data-key="credit-promotion-auto-size"
		  data-locale="en-GB"
			data-purchase-amount="<?= (int)($roundedPrice * 100) ?>"
		></klarna-placement>

		<div
			class="paypal-paylater"
			data-pp-message
			data-pp-style-layout="text"
			data-pp-style-logo-type="inline"
			data-pp-style-text-color="black"
			data-pp-amount="<?= number_format($roundedPrice, 2, '.', '') ?>">
		</div>
	</div>
	
</div>

<script>
require(['jquery'], function($) {
	'use strict';
	
	$(document).ready(function() {
		// Configuration values
		var boxQuantity = <?= /* @noEscape */ $boxQuantity ?>;
		var tilePerM2 = <?= /* @noEscape */ $tilePerM2 ?>;
		
		// Use effective prices (special if available, otherwise regular)
		var pricePerM2 = <?= /* @noEscape */ $effectivePricePerM2 ?>;
		var pricePerBox = <?= /* @noEscape */ $effectivePricePerBox ?>;
		
		// Get lead times for modal check
		var leadTimes = $('#calculator-add-to-cart').data('lead-times') || '';
		
		// Elements
		var $m2Input = $('#calculator-m2');
		var $boxesInput = $('#calculator-boxes');
		var $areaCovered = $('#area-covered');
		var $totalTiles = $('#total-tiles');
		var $updateQuantityText = $('#update-quantity-text');
		var $addToCartButton = $('#calculator-add-to-cart');
		var $klarnaWidget = $('#klarna-widget');
		var $modal = $('#delivery-confirmation-modal');
		var $modalLeadTime = $('#modal-lead-time');
		var $modalConfirm = $('#modal-confirm');
		var $modalCancel = $('#modal-cancel');
		
		// Native form elements
		var $qtyInput = $('#qty');
		var $nativeAddToCartButton = $('#product-addtocart-button');
		
		// Calculation Functions
		function calculateM2FromBoxes(boxes) {
			var tilesInBoxes = boxes * boxQuantity;
			return tilesInBoxes / tilePerM2;
		}
		
		function calculateBoxesFromM2(squareMeters) {
			var tilesNeeded = squareMeters * tilePerM2;
			return Math.ceil(tilesNeeded / boxQuantity);
		}
		
		// Parsing Functions
		function parseM2Input() {
			var inputVal = $m2Input.val().replace(/[^\d.]/g, '');
			return parseFloat(inputVal) || 0;
		}
		
		function parseBoxesInput() {
			var inputVal = $boxesInput.val().replace(/[^\d]/g, '');
			return parseInt(inputVal) || 1;
		}
		
		// Update Functions
		function updateM2Display(value) {
			// ALWAYS set as numeric only - NO UNITS
			$m2Input.val(parseFloat(value).toFixed(3));
		}
		
		function updateBoxesDisplay(value) {
			// Set with "box" or "boxes" unit
			var boxText = (value === 1) ? '1 box' : value + ' boxes';
			$boxesInput.val(boxText);
		}
		
		// Update Klarna widget with new purchase amount
		function updateKlarnaWidget(totalPrice) {
			// Round to 2 decimal places first to ensure consistency
			var roundedPrice = Math.round(totalPrice * 100) / 100;
			
			// Convert price to pence/cents (multiply by 100)
			var purchaseAmount = Math.round(roundedPrice * 100);
			
			// Update the data attribute
			$klarnaWidget.attr('data-purchase-amount', purchaseAmount);
			
			// Try to refresh the Klarna widget if the API is available
			if (window.Klarna && window.Klarna.OnsiteMessaging) {
				try {
					window.Klarna.OnsiteMessaging.refresh();
				} catch (e) {
					// Klarna refresh not available
				}
			}
		}
		
		// Update PayPal Pay Later widget with new purchase amount
		function updatePayPalWidget(totalPrice) {
			var $paypalWidget = $('.paypal-paylater');
			
			// Round to 2 decimal places first to ensure consistency with Klarna
			var roundedPrice = Math.round(totalPrice * 100) / 100;
			
			// Format price to 2 decimal places as a string
			var formattedPrice = roundedPrice.toFixed(2);
			
			// Update the data attribute (PayPal expects the amount as a decimal string)
			$paypalWidget.attr('data-pp-amount', formattedPrice);
			
			// Try to refresh the PayPal widget if the API is available
			if (window.paypal && window.paypal.Messages) {
				try {
					// Re-render the PayPal message with the new amount
					window.paypal.Messages({
						amount: parseFloat(formattedPrice),
						placement: 'payment',
						style: {
							layout: 'text',
							logo: {
								type: 'inline'
							},
							text: {
								color: 'black'
							}
						}
					}).render('.paypal-paylater');
				} catch (e) {
					// PayPal refresh not available
				}
			}
		}
		
		function updateFromM2() {
			var m2 = parseM2Input();
			
			// Validate m2 input (can be 0)
			if (m2 < 0) {
				m2 = 0;
			}
			
			// Calculate boxes (ensuring minimum of 1)
			var boxes = Math.max(1, calculateBoxesFromM2(m2));
			
			// Update displays
			updateM2Display(m2);
			updateBoxesDisplay(boxes);
			
			// Update results
			updateResults(boxes, m2);
		}
		
		function updateFromBoxes() {
			var boxes = parseBoxesInput();
			
			// Always enforce minimum of 1 box
			if (boxes < 1) {
				boxes = 1;
			}
			
			var m2 = calculateM2FromBoxes(boxes);
			
			// Update displays
			updateBoxesDisplay(boxes);
			updateM2Display(m2);
			
			// Update results
			updateResults(boxes, m2);
		}
		
		function updateResults(boxes, m2) {
			// Calculate the exact area covered by the boxes
			var exactAreaCovered = calculateM2FromBoxes(boxes);
			
			// Calculate total tiles
			var totalTiles = boxes * boxQuantity;
			
			// Calculate total price
			var totalPrice = boxes * pricePerBox;
			
			// Update the result text
			$('#result-box-text').text((boxes === 1) ? '1 box' : boxes + ' boxes');
			$areaCovered.text(exactAreaCovered.toFixed(3));
			$totalTiles.text(totalTiles);
			
			// Update button text with effective price
			var buttonBoxText = (boxes === 1) ? 'Box' : 'Boxes';
			$updateQuantityText.html('Add ' + boxes + ' ' + buttonBoxText + ' &mdash; &pound;' + totalPrice.toFixed(2));
			
			// Update both payment widgets
			updateKlarnaWidget(totalPrice);
			updatePayPalWidget(totalPrice);
			
			// Update native form quantity and enable button
			updateNativeForm(totalTiles);
		}
		
		// Update the native Magento form values
		function updateNativeForm(totalTiles) {
			// Update the native quantity input
			$qtyInput.val(totalTiles);
			
			// Enable the native add to cart button
			$nativeAddToCartButton.prop('disabled', false);
		}
		
		// Modal Functions
		function showDeliveryModal() {
			$modalLeadTime.text(leadTimes);
			$modal.fadeIn(300);
			$('body').css('overflow', 'hidden');
		}
		
		function hideDeliveryModal() {
			$modal.fadeOut(300);
			$('body').css('overflow', '');
		}
		
		function shouldShowDeliveryModal() {
			// Check if lead times contains "Next Working Day" or is empty
			if (!leadTimes || leadTimes.trim() === '') {
				return false;
			}
			
			// Case-insensitive check for variations of next day delivery
			var nextDayVariations = [
				'Available for Delivery from Next Working Day',
				'Next Working Day',
				'Next Day',
				'Available Next Day'
			];
			
			var leadTimesLower = leadTimes.toLowerCase();
			for (var i = 0; i < nextDayVariations.length; i++) {
				if (leadTimesLower.indexOf(nextDayVariations[i].toLowerCase()) !== -1) {
					return false;
				}
			}
			
			return true;
		}
		
		// Cart Function
		function addToCart() {
			var boxes = parseBoxesInput();
			var totalTiles = boxes * boxQuantity;
			
			// Update the native quantity input
			$qtyInput.val(totalTiles);
			
			// Make sure the native add to cart button is enabled
			$nativeAddToCartButton.prop('disabled', false);
			
			// Trigger the native add to cart button click
			$nativeAddToCartButton.trigger('click');
		}
		
		// Button Event Handlers
		$('#increase-m2').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseM2Input();
			var newValue = currentValue + 0.1;
			updateM2Display(newValue);
			updateFromM2();
		});
		
		$('#decrease-m2').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseM2Input();
			if (currentValue >= 0.1) {
				var newValue = Math.max(0, currentValue - 0.1);
				updateM2Display(newValue);
				updateFromM2();
			}
		});
		
		$('#increase-boxes').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseBoxesInput();
			var newValue = currentValue + 1;
			updateBoxesDisplay(newValue);
			updateFromBoxes();
		});
		
		$('#decrease-boxes').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseBoxesInput();
			if (currentValue > 1) {
				var newValue = currentValue - 1;
				updateBoxesDisplay(newValue);
				updateFromBoxes();
			}
		});
		
		// Add to Cart Button Handler with Modal Check
		$addToCartButton.on('click', function(e) {
			e.preventDefault();
			
			// Check if we need to show the delivery modal
			if (shouldShowDeliveryModal()) {
				showDeliveryModal();
			} else {
				// Proceed directly to cart
				addToCart();
			}
		});
		
		// Modal Button Handlers
		$modalConfirm.on('click', function() {
			hideDeliveryModal();
			addToCart();
		});
		
		$modalCancel.on('click', function() {
			hideDeliveryModal();
		});
		
		// Close modal when clicking overlay
		$('.delivery-modal-overlay').on('click', function() {
			hideDeliveryModal();
		});
		
		// Close modal with Escape key
		$(document).on('keydown', function(e) {
			if (e.key === 'Escape' && $modal.is(':visible')) {
				hideDeliveryModal();
			}
		});
		
		// Input Event Handlers
		$m2Input.on('input', function() {
			// Force numeric input only
			var currentValue = $(this).val();
			var cleanValue = currentValue.replace(/[^\d.]/g, '');
			
			// If non-numeric characters were found, update the input
			if (cleanValue !== currentValue) {
				$(this).val(cleanValue);
			}
		});
		
		$m2Input.on('change blur', function() {
			// Format on change or blur
			updateFromM2();
		});
		
		$boxesInput.on('input change', function() {
			var value = parseBoxesInput();
			if (value < 1) value = 1;
			updateBoxesDisplay(value);
			updateFromBoxes();
		});
		
		// Initialize Calculator
		function initializeCalculator() {
			// Set initial values
			updateM2Display(calculateM2FromBoxes(1));
			updateBoxesDisplay(1);
			
			// Calculate area covered by 1 box
			var exactAreaCovered = calculateM2FromBoxes(1);
			
			// Calculate initial total tiles (1 box)
			var initialTotalTiles = 1 * boxQuantity;
			
			// Update result text
			$('#result-box-text').text('1 box');
			$areaCovered.text(exactAreaCovered.toFixed(3));
			$totalTiles.text(initialTotalTiles);
			
			// Update button text with effective price
			$updateQuantityText.html('Add 1 Box &mdash; &pound;' + pricePerBox.toFixed(2));
			
			// Initialize both payment widgets
			updateKlarnaWidget(pricePerBox);
			updatePayPalWidget(pricePerBox);
			
			// Initialize the native form
			updateNativeForm(initialTotalTiles);
		}
		
		// Initialize
		initializeCalculator();
	});
});
</script>

<?php 
} else {
	// Show a warning message about missing attributes
	$attributeLabels = $block->getAttributeLabels();
	$missingLabels = [];
	
	foreach ($missingAttributes as $attribute) {
		$missingLabels[] = isset($attributeLabels[$attribute]) ? $attributeLabels[$attribute] : $attribute;
	}
	
	$missingText = implode(', ', $missingLabels);
?>

<div class="message warning">
	<span><?= $block->escapeHtml(__('Sorry, we can\'t show the Tile Calculator on this product as we\'re missing data for %1.', $missingText)) ?></span>
</div>

<?php
}
?>
