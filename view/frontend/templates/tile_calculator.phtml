<?php
/**
 * CravenDunnill ProductTileCalculator Extension
 *
 * @var $block \CravenDunnill\ProductTileCalculator\Block\TileCalculator
 */

// Get the product from the block
$product = $block->getProduct();

// Check if it's a simple product first
if (!$block->isSimpleProduct()) {
	return; // Only show calculator or warnings for simple products
}

// Get missing attributes
$missingAttributes = $block->getMissingAttributes();
$hasAllAttributes = empty($missingAttributes);

// If we have all required attributes, show the calculator
if ($hasAllAttributes) {
	// Fallback values for debugging/testing
	$boxQuantity = $product->getData('box_quantity') ?: 10;
	$tilePerM2 = $product->getData('tile_per_m2') ?: 8;
	$pricePerM2 = $product->getData('price_m2') ?: 25;
	$pricePerTile = $block->getPricePerTile();
	$pricePerBox = $boxQuantity * $pricePerTile;
?>

<style>
	/* Hide native product price and add to cart form */
	.product-info-price,
	#product_addtocart_form {
		display: none !important;
	}
	
	/* Remove all rounded corners */
	.tile-calculator-container,
	.tile-calculator-container .quantity-controls input,
	.tile-calculator-container .quantity-controls button,
	.tile-calculator-container .actions a,
	.tile-calculator-container .message {
		border-radius: 0 !important;
	}
	
	/* Override default styles to force labels above inputs */
	.tile-calculator-container .input-group {
		display: block !important; /* Force block display */
		margin-bottom: 15px;
	}
	
	.tile-calculator-container .input-group label {
		display: block !important; /* Force block display */
		width: 100% !important;
		margin-bottom: 8px;
		font-weight: 600;
	}
	
	.tile-calculator-container .quantity-controls {
		display: flex;
		align-items: center;
		width: 100%;
	}
	
	/* Make input fields double width */
	.tile-calculator-container .quantity-controls input {
		width: 120px !important; /* Double the original width */
		height: 38px;
		text-align: center;
		margin: 0 5px;
	}
	
	/* Results text styling */
	.tile-calculator-container .result-text {
		font-size: 16px;
		margin: 15px 0;
		text-align: center;
	}
	
	.tile-calculator-container .result-text strong {
		font-weight: bold;
	}
	
	/* Full width button styling */
	.tile-calculator-container .actions {
		margin-top: 20px;
		width: 100%;
	}
	
	.tile-calculator-container .actions a {
		display: block !important;
		width: 100% !important;
		text-align: center;
		padding: 12px 0;
		font-size: 16px;
	}
</style>

<div class="tile-calculator-container" id="tile-calculator">
	<div class="calculator-inputs">
		<div class="input-row" style="display: flex; justify-content: space-between; gap: 20px;">
			<!-- Number of Boxes (left) -->
			<div class="input-group" style="flex: 1;">
				<!-- Updated label to include price per box and tiles per box -->
				<label for="calculator-boxes">
					<?= __('&pound;%1 per Box (%2 tiles per box)', number_format($pricePerBox, 2), $boxQuantity) ?>
				</label>
				<div class="quantity-controls">
					<button type="button" class="action minus" id="decrease-boxes">
						<span>-</span>
					</button>
					<input type="number" 
						   id="calculator-boxes" 
						   name="calculator-boxes" 
						   step="1" 
						   min="1" 
						   value="1" 
						   class="input-text">
					<button type="button" class="action plus" id="increase-boxes">
						<span>+</span>
					</button>
				</div>
			</div>
			
			<!-- Area in m² (right) -->
			<div class="input-group" style="flex: 1;">
				<!-- Updated label to include price per m² -->
				<label for="calculator-m2">
					<?= __('&pound;%1 per m²', number_format($pricePerM2, 2)) ?>
				</label>
				<div class="quantity-controls">
					<button type="button" class="action minus" id="decrease-m2">
						<span>-</span>
					</button>
					<input type="number" 
						   id="calculator-m2" 
						   name="calculator-m2" 
						   step="0.1" 
						   min="0.1" 
						   value="1" 
						   class="input-text">
					<button type="button" class="action plus" id="increase-m2">
						<span>+</span>
					</button>
				</div>
			</div>
		</div>
	</div>

	<!-- Removed the box styling, just using a paragraph with the result text -->
	<p class="result-text">
		<strong><span id="boxes-needed">1</span> <span id="box-text">box</span></strong> 
		<?= __('will cover') ?> 
		<strong><span id="area-covered">0</span> m²</strong>
	</p>
	
	<div class="actions">
		<a href="javascript:void(0);" 
		   class="action primary" 
		   id="calculator-add-to-cart"
		   title="<?= $block->escapeHtml(__('Add to Cart')) ?>">
			<span id="update-quantity-text"><?= __('Add 1 Box &mdash; &pound;%1', number_format($pricePerBox, 2)) ?></span>
		</a>
	</div>
</div>

<script>
require(['jquery'], function($) {
	'use strict';
	
	$(document).ready(function() {
		console.log('Tile calculator script loaded');
		
		// Configuration values
		var boxQuantity = <?= /* @noEscape */ $boxQuantity ?>;
		var tilePerM2 = <?= /* @noEscape */ $tilePerM2 ?>;
		var pricePerBox = <?= /* @noEscape */ $pricePerBox ?>;
		
		// Elements
		var $m2Input = $('#calculator-m2');
		var $boxesInput = $('#calculator-boxes');
		var $boxesNeeded = $('#boxes-needed');
		var $boxText = $('#box-text');
		var $areaCovered = $('#area-covered');
		var $updateQuantityText = $('#update-quantity-text');
		var $addToCartButton = $('#calculator-add-to-cart');
		
		// Native form elements
		var $qtyInput = $('#qty');
		var $nativeAddToCartButton = $('#product-addtocart-button');
		
		// Functions
		function calculateM2FromBoxes(boxes) {
			var tilesInBoxes = boxes * boxQuantity;
			return tilesInBoxes / tilePerM2;
		}
		
		function calculateBoxesFromM2(squareMeters) {
			var tilesNeeded = squareMeters * tilePerM2;
			return Math.ceil(tilesNeeded / boxQuantity);
		}
		
		function updateFromM2() {
			console.log('Updating from m²');
			var m2 = parseFloat($m2Input.val()) || 0;
			
			if (m2 <= 0) {
				m2 = 0.1;
				$m2Input.val(m2);
			}
			
			var boxes = calculateBoxesFromM2(m2);
			$boxesInput.val(boxes);
			updateResults(boxes, m2);
		}
		
		function updateFromBoxes() {
			console.log('Updating from boxes');
			var boxes = parseInt($boxesInput.val()) || 0;
			
			if (boxes <= 0) {
				boxes = 1;
				$boxesInput.val(boxes);
			}
			
			var m2 = calculateM2FromBoxes(boxes);
			$m2Input.val(m2.toFixed(2));
			updateResults(boxes, m2);
		}
		
		function updateResults(boxes, m2) {
			// Update boxes needed text
			$boxesNeeded.text(boxes);
			
			// Update box/boxes text for plural handling
			var boxText = (boxes > 1) ? 'boxes' : 'box';
			$boxText.text(boxText);
			
			// Update area covered
			$areaCovered.text(m2.toFixed(2));
			
			// Update total price on button with pluralization and em dash
			var totalPrice = boxes * pricePerBox;
			var buttonBoxText = (boxes > 1) ? 'Boxes' : 'Box';
			$updateQuantityText.html('Add ' + boxes + ' ' + buttonBoxText + ' &mdash; &pound;' + totalPrice.toFixed(2));
		}
		
		function addToCart() {
			var boxes = parseInt($boxesInput.val()) || 1;
			var totalTiles = boxes * boxQuantity;
			
			// Update the native quantity input
			$qtyInput.val(totalTiles);
			
			// Make sure the native add to cart button is enabled
			$nativeAddToCartButton.prop('disabled', false);
			
			// Trigger the native add to cart button click
			$nativeAddToCartButton.trigger('click');
			
			console.log('Adding to cart:', totalTiles, 'tiles (' + boxes + ' boxes)');
		}
		
		// Button event handlers
		$('#increase-m2').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseFloat($m2Input.val()) || 0;
			$m2Input.val((currentValue + 0.1).toFixed(1)).trigger('change');
		});
		
		$('#decrease-m2').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseFloat($m2Input.val()) || 0;
			if (currentValue > 0.1) {
				$m2Input.val((currentValue - 0.1).toFixed(1)).trigger('change');
			}
		});
		
		$('#increase-boxes').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseInt($boxesInput.val()) || 0;
			$boxesInput.val(currentValue + 1).trigger('change');
		});
		
		$('#decrease-boxes').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseInt($boxesInput.val()) || 0;
			if (currentValue > 1) {
				$boxesInput.val(currentValue - 1).trigger('change');
			}
		});
		
		// Add to cart button click handler
		$addToCartButton.on('click', function(e) {
			e.preventDefault();
			addToCart();
		});
		
		// Input event handlers
		$m2Input.on('input change', updateFromM2);
		$boxesInput.on('input change', updateFromBoxes);
		
		// Initial calculation
		updateFromBoxes();
		
		console.log('Tile calculator initialized with boxQuantity:', boxQuantity);
	});
});
</script>

<?php 
} else {
	// Show a warning message about missing attributes
	$attributeLabels = $block->getAttributeLabels();
	$missingLabels = [];
	
	foreach ($missingAttributes as $attribute) {
		$missingLabels[] = isset($attributeLabels[$attribute]) ? $attributeLabels[$attribute] : $attribute;
	}
	
	$missingText = implode(', ', $missingLabels);
?>

<div class="message warning">
	<span><?= $block->escapeHtml(__('Sorry, we can\'t show the Tile Calculator on this product as we\'re missing data for %1.', $missingText)) ?></span>
</div>

<?php
}
?>