<?php
/**
 * CravenDunnill ProductTileCalculator Extension
 *
 * @var $block \CravenDunnill\ProductTileCalculator\Block\TileCalculator
 */

// Get the product from the block
$product = $block->getProduct();

// Fallback values for debugging/testing
$boxQuantity = $product->getData('box_quantity') ?: 10;
$tilePerM2 = $product->getData('tile_per_m2') ?: 8;
$pricePerM2 = $product->getData('price_m2') ?: 25;
$pricePerTile = $block->getPricePerTile();
$pricePerBox = $boxQuantity * $pricePerTile;
?>

<div class="tile-calculator-container" id="tile-calculator">
	<div class="calculator-info">
		<p><?= $block->escapeHtml(__('Tiles per box: %1', $boxQuantity)) ?></p>
		<p><?= $block->escapeHtml(__('Tiles per m²: %1', $tilePerM2)) ?></p>
		<p><?= __('Price per m²: %1', $block->formatPrice($pricePerM2)) ?></p>
		<p><?= __('Price per box: %1', $block->formatPrice($pricePerBox)) ?></p>
	</div>

	<div class="calculator-inputs">
		<div class="input-row" style="display: flex; justify-content: space-between; gap: 20px;">
			<div class="input-group" style="flex: 1;">
				<label for="calculator-m2"><?= $block->escapeHtml(__('Area in m²:')) ?></label>
				<div class="quantity-controls">
					<button type="button" class="action minus" id="decrease-m2">
						<span>-</span>
					</button>
					<input type="number" 
						   id="calculator-m2" 
						   name="calculator-m2" 
						   step="0.1" 
						   min="0.1" 
						   value="1" 
						   class="input-text">
					<button type="button" class="action plus" id="increase-m2">
						<span>+</span>
					</button>
				</div>
			</div>
			
			<div class="input-group" style="flex: 1;">
				<label for="calculator-boxes"><?= $block->escapeHtml(__('Number of boxes:')) ?></label>
				<div class="quantity-controls">
					<button type="button" class="action minus" id="decrease-boxes">
						<span>-</span>
					</button>
					<input type="number" 
						   id="calculator-boxes" 
						   name="calculator-boxes" 
						   step="1" 
						   min="1" 
						   value="1" 
						   class="input-text">
					<button type="button" class="action plus" id="increase-boxes">
						<span>+</span>
					</button>
				</div>
			</div>
		</div>
	</div>

	<div class="calculator-results">
		<p class="result-text"><?= __('You will need:') ?> 
			<span id="boxes-needed">1</span> <?= __('box(es)') ?> 
			(<span id="area-covered">0</span> <?= __('m²') ?>)
		</p>
		<p class="total-price">
			<?= __('Total price:') ?> 
			<span id="total-price">
				&pound;<?= number_format($pricePerBox, 2) ?>
			</span>
		</p>
	</div>
	
	<div class="actions">
		<a href="javascript:void(0);" 
		   class="action primary" 
		   id="update-quantity-link"
		   title="<?= $block->escapeHtml(__('Update Quantity')) ?>">
			<span><?= $block->escapeHtml(__('Update Quantity')) ?></span>
		</a>
	</div>
</div>

<script>
require(['jquery'], function($) {
	'use strict';
	
	$(document).ready(function() {
		console.log('Tile calculator script loaded');
		
		// Configuration values
		var boxQuantity = <?= /* @noEscape */ $boxQuantity ?>;
		var tilePerM2 = <?= /* @noEscape */ $tilePerM2 ?>;
		var pricePerBox = <?= /* @noEscape */ $pricePerBox ?>;
		
		// Elements
		var $m2Input = $('#calculator-m2');
		var $boxesInput = $('#calculator-boxes');
		var $boxesNeeded = $('#boxes-needed');
		var $areaCovered = $('#area-covered');
		var $totalPrice = $('#total-price');
		
		// Functions
		function calculateM2FromBoxes(boxes) {
			var tilesInBoxes = boxes * boxQuantity;
			return tilesInBoxes / tilePerM2;
		}
		
		function calculateBoxesFromM2(squareMeters) {
			var tilesNeeded = squareMeters * tilePerM2;
			return Math.ceil(tilesNeeded / boxQuantity);
		}
		
		function updateFromM2() {
			console.log('Updating from m²');
			var m2 = parseFloat($m2Input.val()) || 0;
			
			if (m2 <= 0) {
				m2 = 0.1;
				$m2Input.val(m2);
			}
			
			var boxes = calculateBoxesFromM2(m2);
			$boxesInput.val(boxes);
			updateResults(boxes, m2);
		}
		
		function updateFromBoxes() {
			console.log('Updating from boxes');
			var boxes = parseInt($boxesInput.val()) || 0;
			
			if (boxes <= 0) {
				boxes = 1;
				$boxesInput.val(boxes);
			}
			
			var m2 = calculateM2FromBoxes(boxes);
			$m2Input.val(m2.toFixed(2));
			updateResults(boxes, m2);
		}
		
		function updateResults(boxes, m2) {
			$boxesNeeded.text(boxes);
			$areaCovered.text(m2.toFixed(2));
			$totalPrice.html('&pound;' + (boxes * pricePerBox).toFixed(2));
		}
		
		function updateQuantity() {
			var boxes = parseInt($boxesInput.val()) || 1;
			var totalTiles = boxes * boxQuantity;
			
			$('#qty').val(totalTiles);
			$('#product-addtocart-button').prop('disabled', false);
			
			console.log('Updated quantity to', totalTiles, 'tiles');
		}
		
		// Button event handlers
		$('#increase-m2').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseFloat($m2Input.val()) || 0;
			$m2Input.val((currentValue + 0.1).toFixed(1)).trigger('change');
		});
		
		$('#decrease-m2').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseFloat($m2Input.val()) || 0;
			if (currentValue > 0.1) {
				$m2Input.val((currentValue - 0.1).toFixed(1)).trigger('change');
			}
		});
		
		$('#increase-boxes').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseInt($boxesInput.val()) || 0;
			$boxesInput.val(currentValue + 1).trigger('change');
		});
		
		$('#decrease-boxes').on('click', function(e) {
			e.preventDefault();
			var currentValue = parseInt($boxesInput.val()) || 0;
			if (currentValue > 1) {
				$boxesInput.val(currentValue - 1).trigger('change');
			}
		});
		
		$('#update-quantity-link').on('click', function(e) {
			e.preventDefault();
			updateQuantity();
		});
		
		// Input event handlers
		$m2Input.on('input change', updateFromM2);
		$boxesInput.on('input change', updateFromBoxes);
		
		// Initial calculation
		updateFromBoxes();
		
		console.log('Tile calculator initialized with boxQuantity:', boxQuantity);
	});
});
</script>